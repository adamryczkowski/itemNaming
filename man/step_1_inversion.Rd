% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generic.R
\name{step_1_inversion}
\alias{step_1_inversion}
\alias{format_item_list_en}
\title{Generates a string (or table) that adequately describes a set of elements in the natural language.}
\usage{
step_1_inversion(items_df, all_except_infix = all_except_infix_fn_pl,
  item_numeral, threshold_for_inversion = 0.8, step_2_ellipsis,
  flag_prevent_ellipsis_on_inversion = TRUE,
  included_column_name = paste0(getOption("special_column_prefix"),
  getOption("includes_column_name")))
}
\arguments{
\item{items_df}{A vector, data.frame or a list that will be translated into the string. List will be translated into the data.frame using lists2df.
It can also be a list of two equal sized vectors, in which case first vector will give a first name, and second (if not NA) will give the alternate name, that
will be displayed in braces. Names that start with underscore are ignored.
Columns with names that start with underscore followed by name of the existing column are assumed to contain properties of the given column.}

\item{all_except_infix}{Function that returns string that will be prefixed before inversed mode. Defaults to \code{'all #item_name_plural except for '}.
Function takes arguments: \code{item_numeral}, \code{all_items_count}, \code{selected_items_count}.}

\item{threshold_for_inversion}{Minimum number of items required to show the inversion. Inversion excludes table.}

\item{field_attributes_df}{A data.frame or a list the defines properties of the items. The properties can also be input as attributes of the columns of the items,
                        if items is a data.frame.
\describe{
  \item{label_name}{String with a nice name of the attribute. If specified, it will be preferred over the column name. Ignored on the first column. If empty, the name of the attribute will never be displayed.}
  \item{label_name_suffix}{String that will be placed immidiately after the column name. Defaults to \code{' '}. Suggested alternative value: \code{': '}.}
  \item{included}{Boolean that determines whether a given item should be included in the list. This allows for the inverted string ("all cases except for ...")}
  \item{prefix}{String appended before the item. Can be used to add Markdown quotes \code{'`'}}
  \item{suffix}{String appended behind the item. Can be used to add Markdown quotes \code{'`'}}
}}

\item{attribute_prefix}{String that will be put before the list of attributes. Defaults to \code{'\\uA0('}}

\item{attribute_sufix}{String that will be put before the list of attributes. Defaults to \code{')'}}

\item{attribute_comma}{String that will put between attributes in the list of the attributes. Defaults to \code{', '}}

\item{attribute_and}{String that will put between the last two attributes in the attributes' list. Defaults to \code{' and\\uA0'}}

\item{item_comma}{String that will put between items. Defaults to \code{', '}}

\item{item_and}{String that will put between the last two items. Defaults to \code{' and\\uA0'}}

\item{item_ellipsis}{Function that will emit string that be put in place of the ommited items, when rendering in ellipsis mode. The function will get the following arguments: \code{total_count}, \code{omited_count}, \code{item_numeral}. Defaults to function that renders string ", and 5 more items".
Possible fields: \code{#item_count_full} - number of ommited elements together with word "item" (customizable elsewhere).
\code{#item_count_full_more} - number of ommited elements together with phrase "more items", like in "34 more item".
\code{#item_count_raw} - just integer with number of ommited elements.}

\item{item_name}{Vector of two strings that name singular and plural name of the item. Defaults to \code{c('item','items')}.}

\item{max_explicit_items_count}{Maximum number of explicit items. -1 is infinity. If number of items in the items_df exceeds that number, function will use
the ellipsis. Must be bigger than sum of \code{number_of_elements_around_ellipsis} arguments.}

\item{number_of_elements_around_ellipsis}{Vector of two integers, defaults to \code{3, 2}. First integer determines number of elements before the ellipsis,
and second - after.}
}
\description{
Supports multiple object attributes (that can be used as a secondary names, like \code{element1 (name: Bob), element2 (Charlie) and element3 (Dave)}.'
Supports Markdown formatting
Supports inverse matching, i.e. \code{All elements except for element20 (name: Ted) and element21 (Unity)}.
Supports tables of items for really big lists.
}
\details{
Produced string will have a format
\code{First item[[<attribute_prefix>Attribute 1 with name]<attribute_comma>|<attribute_and>Attribute 2 with name... <attribute_sufix>]<item_comma>|<item_and>|<item_ellipsis>Second item[...]...}

where \code{attribute_prefix}, \code{attribute_comma}, \code{attribute_and}, \code{attribute_sufix}, \code{item_comma}, \code{item_and} and \code{item_ellipsis} are arguments to the function.

Each item and its attributes share additional arguments, that are input using the \code{field_attributes_df} data frame.
}
